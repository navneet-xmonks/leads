name: Lead Automation

on:
  # Run on schedule (every hour)
  schedule:
    - cron: '0 * * * *'  # Every hour
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Run on push to main branch (for testing)
  push:
    branches: [ main ]
  
  # Run on pull requests to main
  pull_request:
    branches: [ main ]

jobs:
  lead-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Fail fast if something goes wrong
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN_WORKFLOW }}
        fetch-depth: 1  # Shallow clone for speed
      
    - name: Download previous CSV data
      uses: actions/download-artifact@v4
      with:
        pattern: lead-data-*
        merge-multiple: true
        path: ./
      continue-on-error: true
      timeout-minutes: 2  # Don't wait too long for artifacts
      
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'  # Built-in pip caching
        cache-dependency-path: 'requirements.txt'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create necessary directories
      run: |
        mkdir -p data/
        
    - name: Run lead automation
      env:
        # Zoho API credentials (set these in GitHub repository secrets)
        ZOHO_CLIENT_ID: ${{ secrets.ZOHO_CLIENT_ID }}
        ZOHO_CLIENT_SECRET: ${{ secrets.ZOHO_CLIENT_SECRET }}
        ZOHO_REFRESH_TOKEN: ${{ secrets.ZOHO_REFRESH_TOKEN }}
        ZOHO_API_DOMAIN: ${{ secrets.ZOHO_API_DOMAIN }}
        
        # AiSensy API credentials
        AISENSY_API_KEY: ${{ secrets.AISENSY_API_KEY }}
        
      run: |
        echo "🚀 Starting lead automation..."
        python lead_automation.py
        
    - name: Commit and push CSV updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        echo "📁 Files in directory:"
        ls -la
        
        echo "📊 Git status before adding:"
        git status
        
        # Only add files that exist
        [ -f "erickson_leads.csv" ] && git add erickson_leads.csv && echo "✅ Added erickson_leads.csv"
        [ -f "last_run.json" ] && git add last_run.json && echo "✅ Added last_run.json"
        [ -f "zoho_tokens.json" ] && git add zoho_tokens.json && echo "✅ Added zoho_tokens.json"
        
        echo "📊 Git status after adding:"
        git status
        
        # Only commit if there are changes
        if ! git diff --staged --quiet; then
          echo "📝 Changes detected, committing..."
          git commit -m "Update lead data - $(date)"
          git push https://${{ secrets.GITHUB_TOKEN_WORKFLOW }}@github.com/navneet-xmonks/leads.git main
          echo "✅ Changes pushed successfully"
        else
          echo "📝 No changes to commit"
        fi
      continue-on-error: true
        
    - name: Upload CSV artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: lead-data-${{ github.run_number }}
        path: |
          erickson_leads.csv
          last_run.json
          zoho_tokens.json
        retention-days: 30
        
    - name: Display automation summary
      if: always()
      run: |
        echo "📊 Automation Summary:"
        echo "📁 Files created:"
        ls -la *.csv *.json 2>/dev/null || echo "No CSV/JSON files found"
        
        if [ -f "erickson_leads.csv" ]; then
          echo "✅ CSV file exists"
          echo "📝 Total leads in CSV: $(tail -n +2 erickson_leads.csv | wc -l)"
        else
          echo "❌ No CSV file found"
        fi
        
        if [ -f "last_run.json" ]; then
          echo "✅ Last run file exists"
          echo "📄 Content:"
          cat last_run.json
        else
          echo "❌ No last run file found"
          echo "🔍 Creating missing last run file..."
          echo '{"last_run": "'$(date -Iseconds)'", "created_by": "github_actions"}' > last_run.json
        fi
